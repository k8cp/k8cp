import org.openjfx.gradle.JavaFXPlatform

plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.15'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id "com.google.osdetector" version "1.7.3"
    id 'org.beryx.jlink' version '3.0.1'
    id "io.freefair.lombok" version "8.10"
}

group 'io.github.vcvitaly'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.11.0'
    platform = getPlatform()
    javaVer = JavaVersion.VERSION_21
}

java {
    sourceCompatibility = javaVer
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'io.github.vcvitaly.k8cp'
    mainClass = 'io.github.vcvitaly.k8cp.App'
}

javafx {
    version = javaVer
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.2')
    implementation('net.synedra:validatorfx:0.4.0') {
        exclude(group: 'org.openjfx')
    }
    implementation "org.kordamp.ikonli:ikonli-javafx:${ikonliVersion}"
    implementation "org.kordamp.ikonli:ikonli-fontawesome-pack:${ikonliVersion}"
    implementation "org.kordamp.ikonli:ikonli-fontawesome5-pack:${ikonliVersion}"
    implementation "org.kordamp.ikonli:ikonli-material2-pack:${ikonliVersion}"
//    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')

    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "org.slf4j:slf4j-api:2.0.16"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"

    implementation ("io.kubernetes:client-java:21.0.1") {
        exclude group: "com.google.code.findbugs", module: "jsr305"
        exclude group: "com.amazonaws", module: "aws-java-sdk-sts"
    }

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    testImplementation 'org.mockito:mockito-core:5.13.0'
    testImplementation "org.assertj:assertj-core:3.26.3"
    testImplementation "org.testfx:testfx-junit5:4.0.18"
    testImplementation 'org.testfx:testfx-core:4.0.18'
    testImplementation 'org.testfx:openjfx-monocle:21.0.2'

    testImplementation 'org.zeroturnaround:zt-zip:1.17'
    testImplementation 'org.hamcrest:hamcrest:2.2'

    testImplementation ("org.testcontainers:testcontainers:${testcontainersVersion}") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }
    testImplementation ("org.testcontainers:junit-jupiter:${testcontainersVersion}") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }
    testImplementation ("org.testcontainers:k3s:${testcontainersVersion}") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
    }

    testImplementation ("com.google.jimfs:jimfs:1.3.0") {
        exclude group: "com.google.code.findbugs", module: "jsr305"
    }
    implementation 'io.github.bitstorm:tinyzip-core:1.0.0'
}

test {
    useJUnitPlatform()
    jvmArgs([
            "--add-exports", "javafx.graphics/com.sun.javafx.application=org.testfx",
             "--add-opens", "javafx.graphics/com.sun.javafx.application=org.testfx",
             "--add-opens", "javafx.graphics/com.sun.glass.ui=org.testfx",
            "--add-opens", "io.github.vcvitaly.k8cp/io.github.vcvitaly.k8cp.controller.init=org.testfx.junit5",
            "--add-exports", "javafx.base/com.sun.javafx.logging=org.testfx.monocle",
            "--add-exports", "javafx.graphics/com.sun.javafx.util=org.testfx.monocle",
            "--add-exports", "javafx.graphics/com.sun.glass.ui=org.testfx.monocle",
            "--add-opens", "javafx.graphics/com.sun.glass.ui=org.testfx.monocle",
            "--add-opens", "io.github.vcvitaly.k8cp/io.github.vcvitaly.k8cp.controller.init=org.testfx.monocle",
            "--add-opens", "io.github.vcvitaly.k8cp/io.github.vcvitaly.k8cp.domain=org.assertj.core",
            "--add-opens", "io.github.vcvitaly.k8cp/io.github.vcvitaly.k8cp.client.impl=junit.jupiter",
            "--add-opens", "io.github.vcvitaly.k8cp/io.github.vcvitaly.k8cp=junit.jupiter",
            "--add-opens", "io.github.vcvitaly.k8cp/io.github.vcvitaly.k8cp.controller=org.testfx.junit5",
            "-Djava.awt.headless=true", "-Dtestfx.robot=glass", "-Dtestfx.headless=true", "-Dprism.order=sw"
    ])
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = [
            '--strip-debug', // remove if debugging is needed
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
            '--ignore-signing-information'
    ]
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

tasks.register('dist') {
    dependsOn clean, jlinkZip
    description "Calls clean and then jlinkZip"
}

configurations
        .matching(it -> it.name.contains("downloadSources"))
        .configureEach {
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, platform.osFamily))
        attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, objects.named(MachineArchitecture, platform.arch))
    }
}

def getPlatform() {
    return JavaFXPlatform.detect(osdetector);
}
